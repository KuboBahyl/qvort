!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	ksmodel.f90	/^    real,private,dimension(3,KSmodes) :: unit_k,k,A,/;"	v	module:KSmodel
B	ksmodel.f90	/^    real,private,dimension(3,KSmodes) :: unit_k,k,A,B$/;"	v	module:KSmodel
KS_rey_int	ksmodel.f90	/^    integer,private, parameter :: KS_rey_int=/;"	v	module:KSmodel
KS_slope	ksmodel.f90	/^    real,private, parameter :: KS_slope=/;"	v	module:KSmodel
KSmodel	ksmodel.f90	/^module KSmodel$/;"	m
KSmodes	ksmodel.f90	/^    integer,private, parameter :: KSmodes=/;"	v	module:KSmodel
abc_A	normal_fluid.f90	/^    real, parameter, private :: abc_A=/;"	v	module:normal_fluid
abc_B	normal_fluid.f90	/^    real, parameter, private :: abc_A=1., abc_B=/;"	v	module:normal_fluid
abc_C	normal_fluid.f90	/^    real, parameter, private :: abc_A=1., abc_B=1., abc_C=/;"	v	module:normal_fluid
abc_k	normal_fluid.f90	/^    real, private :: abc_k$/;"	v	module:normal_fluid
avg_sep	cdata.f90	/^  real :: avg_sep /;"	v	module:cdata
bbl	tree.f90	/^      type (node), pointer :: bbl,/;"	k	type:node
bbr	tree.f90	/^      type (node), pointer :: bbl, bbr /;"	k	type:node
behind	cdata.f90	/^    integer :: infront, behind /;"	k	type:qvort
binormalf	general.f90	/^  real function binormalf(/;"	f	module:general
biot_savart	timestep.f90	/^  subroutine biot_savart(/;"	s	module:timestep
biot_savart_general	timestep.f90	/^  subroutine biot_savart_general(/;"	s	module:timestep
btl	tree.f90	/^      type (node), pointer :: btl,/;"	k	type:node
btr	tree.f90	/^      type (node), pointer :: btl, btr /;"	k	type:node
build_tree	tree.f90	/^  recursive subroutine build_tree(/;"	s	module:tree
calc_KS_amplitudes	ksmodel.f90	/^    subroutine calc_KS_amplitudes(/;"	s	module:KSmodel
calc_velocity	timestep.f90	/^  subroutine calc_velocity(/;"	s	module:timestep
cdata	cdata.f90	/^module cdata$/;"	m
centx	tree.f90	/^      real :: centx,/;"	k	type:node
centy	tree.f90	/^      real :: centx, centy,/;"	k	type:node
centz	tree.f90	/^      real :: centx, centy, centz /;"	k	type:node
circ	tree.f90	/^      real :: circ(/;"	k	type:node
clear_particle	general.f90	/^  subroutine clear_particle(/;"	s	module:general
closest	cdata.f90	/^    integer :: closest /;"	k	type:qvort
closest_tree	tree.f90	/^  recursive subroutine closest_tree(/;"	s	module:tree
closestd	cdata.f90	/^    real :: closestd /;"	k	type:qvort
construct_tree	tree.f90	/^  subroutine construct_tree(/;"	s	module:tree
cross1	ksmodel.f90	/^    real,private,dimension(3,Ksmodes) :: cross1,/;"	v	module:KSmodel
cross2	ksmodel.f90	/^    real,private,dimension(3,Ksmodes) :: cross1,cross2$/;"	v	module:KSmodel
cross_product	general.f90	/^  real function cross_product(/;"	f	module:general
curv_info	diagnostic.f90	/^  subroutine curv_info(/;"	s	module:diagnostic
curvature	general.f90	/^  real function curvature(/;"	f	module:general
data_dump	output.f90	/^  subroutine data_dump$/;"	s	module:output
data_restore	initial.f90	/^  subroutine data_restore$/;"	s	module:initial
dead_tree	tree.f90	/^  subroutine dead_tree(/;"	s	module:tree
delta	cdata.f90	/^    real :: delta$/;"	k	type:qvort
diagnostic	diagnostic.f90	/^module diagnostic$/;"	m
diagnostics_quasip	quasip.f90	/^  subroutine diagnostics_quasip$/;"	s	module:quasip
dist_gen	general.f90	/^  real function dist_gen(/;"	f	module:general
dist_gen_sq	general.f90	/^  real function dist_gen_sq(/;"	f	module:general
distf	general.f90	/^  real function distf(/;"	f	module:general
distfsq	general.f90	/^  real function distfsq(/;"	f	module:general
dt	cdata.f90	/^  real :: dt$/;"	v	module:cdata
empty_tree	tree.f90	/^  recursive subroutine empty_tree(/;"	s	module:tree
energy	cdata.f90	/^  real :: energy /;"	v	module:cdata
energy_info	diagnostic.f90	/^  subroutine energy_info(/;"	s	module:diagnostic
enforce_periodic	periodic.f90	/^  subroutine enforce_periodic(/;"	s	module:periodic
f	cdata.f90	/^  type(qvort), allocatable :: f(/;"	v	module:cdata
fatal_error	cdata.f90	/^  subroutine fatal_error(/;"	s	module:cdata
fbl	tree.f90	/^      type (node), pointer :: fbl,/;"	k	type:node
fbr	tree.f90	/^      type (node), pointer :: fbl, fbr /;"	k	type:node
five_twelths	cdata.f90	/^  real, parameter :: five_twelths=/;"	v	module:cdata
force_direction	forcing.f90	/^  real, private :: force_direction(/;"	v	module:forcing
forcing	forcing.f90	/^module forcing$/;"	m
four_thirds	cdata.f90	/^  real, parameter :: four_thirds=/;"	v	module:cdata
ftl	tree.f90	/^      type (node), pointer :: ftl,/;"	k	type:node
ftr	tree.f90	/^      type (node), pointer :: ftl, ftr /;"	k	type:node
g	cdata.f90	/^  type(quasi), allocatable :: g(/;"	v	module:cdata
general	general.f90	/^module general$/;"	m
get_KS_flow	ksmodel.f90	/^    subroutine get_KS_flow(/;"	s	module:KSmodel
get_deriv_1	general.f90	/^  subroutine get_deriv_1(/;"	s	module:general
get_deriv_2	general.f90	/^  subroutine get_deriv_2(/;"	s	module:general
get_forcing	forcing.f90	/^  subroutine get_forcing(/;"	s	module:forcing
get_ghost_p	periodic.f90	/^  subroutine get_ghost_p(/;"	s	module:periodic
get_normal_velocity	normal_fluid.f90	/^    subroutine get_normal_velocity(/;"	s	module:normal_fluid
ghostb	cdata.f90	/^    real :: ghosti(3), ghostb(/;"	k	type:qvort
ghosti	cdata.f90	/^    real :: ghosti(/;"	k	type:qvort
ghostp	periodic.f90	/^  subroutine ghostp$/;"	s	module:periodic
grid	cdata.f90	/^  type grid$/;"	t	module:cdata
i	run.f90	/^  in/;"	v	program:run
infront	cdata.f90	/^    integer :: infront,/;"	k	type:qvort
init_random_seed	cdata.f90	/^  subroutine init_random_seed(/;"	s	module:cdata
init_setup	initial.f90	/^  subroutine init_setup(/;"	s	module:initial
initial	initial.f90	/^module initial$/;"	m
int_special_dump	cdata.f90	/^  integer :: int_special_dump=/;"	v	module:cdata
itime	cdata.f90	/^  integer :: itime /;"	v	module:cdata
k	ksmodel.f90	/^    real,private,dimension(3,KSmodes) :: unit_k,/;"	v	module:KSmodel
kappa_bar	cdata.f90	/^  real :: kappa_bar /;"	v	module:cdata
kappa_max	cdata.f90	/^  real :: kappa_min, kappa_max /;"	v	module:cdata
kappa_min	cdata.f90	/^  real :: kappa_min,/;"	v	module:cdata
line	line.f90	/^module line$/;"	m
loop_killer	line.f90	/^  subroutine loop_killer(/;"	s	module:line
maxdu	cdata.f90	/^  real :: maxu,maxdu /;"	v	module:cdata
maxu	cdata.f90	/^  real :: maxu,/;"	v	module:cdata
mesh	cdata.f90	/^  type(grid), allocatable :: mesh(/;"	v	module:cdata
mesh_delta	cdata.f90	/^  real :: mesh_delta /;"	v	module:cdata
mesh_velocity	timestep.f90	/^  subroutine mesh_velocity$/;"	s	module:timestep
new_tree	tree.f90	/^  subroutine new_tree(/;"	s	module:tree
node	tree.f90	/^   type node$/;"	t	module:tree
norm_tanf	general.f90	/^  real function norm_tanf(/;"	f	module:general
normal_fluid	normal_fluid.f90	/^module normal_fluid$/;"	m
normalf	general.f90	/^  real function normalf(/;"	f	module:general
nstart	cdata.f90	/^  integer :: nstart=/;"	v	module:cdata
omega	ksmodel.f90	/^    real,private,dimension(KSmodes) :: omega$/;"	v	module:KSmodel
one_half	cdata.f90	/^  real, parameter :: one_half /;"	v	module:cdata
order	ksmodel.f90	/^    subroutine order(/;"	s	module:KSmodel
output	output.f90	/^module output$/;"	m
parray	tree.f90	/^      type (qvort), allocatable :: parray(/;"	k	type:node
pclose	line.f90	/^  subroutine pclose$/;"	s	module:line
pclose_tree	tree.f90	/^  subroutine pclose_tree$/;"	s	module:tree
pcount	cdata.f90	/^  integer :: pcount /;"	v	module:cdata
pcount	tree.f90	/^      integer :: pcount /;"	k	type:node
periodic	periodic.f90	/^module periodic$/;"	m
periodic_bc	cdata.f90	/^  logical :: periodic_bc=/;"	v	module:cdata
pi	cdata.f90	/^  real, parameter :: pi=/;"	v	module:cdata
pinsert	line.f90	/^  subroutine pinsert$/;"	s	module:line
pmotion	timestep.f90	/^  subroutine pmotion(/;"	s	module:timestep
posx	tree.f90	/^      real :: posx,/;"	k	type:node
posy	tree.f90	/^      real :: posx,posy,/;"	k	type:node
posz	tree.f90	/^      real :: posx,posy,posz /;"	k	type:node
precon	line.f90	/^  subroutine precon$/;"	s	module:line
premove	line.f90	/^  subroutine premove$/;"	s	module:line
print_dims	output.f90	/^  subroutine print_dims(/;"	s	module:output
print_info	output.f90	/^  subroutine print_info(/;"	s	module:output
print_mesh	output.f90	/^  subroutine print_mesh(/;"	s	module:output
printf	output.f90	/^  subroutine printf(/;"	s	module:output
printg	output.f90	/^  subroutine printg(/;"	s	module:output
qp_maxdu	quasip.f90	/^  real :: qp_maxu=0., qp_maxdu=/;"	v	module:quasip
qp_maxu	quasip.f90	/^  real :: qp_maxu=/;"	v	module:quasip
qp_sep	quasip.f90	/^  real :: qp_sep=/;"	v	module:quasip
qp_urms	quasip.f90	/^  real :: qp_maxu=0., qp_maxdu=0., qp_urms=/;"	v	module:quasip
quasi	cdata.f90	/^  type quasi /;"	t	module:cdata
quasip	quasip.f90	/^module quasip$/;"	m
quasip_evolution	quasip.f90	/^  subroutine quasip_evolution$/;"	s	module:quasip
qvort	cdata.f90	/^  type qvort /;"	t	module:cdata
read_run_file	cdata.f90	/^  subroutine read_run_file(/;"	s	module:cdata
recon_count	cdata.f90	/^  integer :: recon_count=/;"	v	module:cdata
remove_count	cdata.f90	/^  integer :: remove_count=/;"	v	module:cdata
run	run.f90	/^program run$/;"	p
sdata_dump	output.f90	/^  subroutine sdata_dump$/;"	s	module:output
setup_KS	ksmodel.f90	/^    subroutine setup_KS$/;"	s	module:KSmodel
setup_cardoid	initial.f90	/^  subroutine setup_cardoid$/;"	s	module:initial
setup_crow	initial.f90	/^  subroutine setup_crow$/;"	s	module:initial
setup_forcing	forcing.f90	/^  subroutine setup_forcing(/;"	s	module:forcing
setup_kivotedes	initial.f90	/^  subroutine setup_kivotedes$/;"	s	module:initial
setup_leap_frog	initial.f90	/^  subroutine setup_leap_frog$/;"	s	module:initial
setup_line_motion	initial.f90	/^  subroutine setup_line_motion$/;"	s	module:initial
setup_linked_filaments	initial.f90	/^  subroutine setup_linked_filaments$/;"	s	module:initial
setup_mesh	initial.f90	/^  subroutine setup_mesh$/;"	s	module:initial
setup_normal_fluid	normal_fluid.f90	/^    subroutine setup_normal_fluid$/;"	s	module:normal_fluid
setup_quasip	quasip.f90	/^  subroutine setup_quasip$/;"	s	module:quasip
setup_random_loops	initial.f90	/^  subroutine setup_random_loops$/;"	s	module:initial
setup_single_line	initial.f90	/^  subroutine setup_single_line$/;"	s	module:initial
setup_single_loop	initial.f90	/^  subroutine setup_single_loop$/;"	s	module:initial
setup_tangle	initial.f90	/^  subroutine setup_tangle$/;"	s	module:initial
setup_wave_line	initial.f90	/^  subroutine setup_wave_line$/;"	s	module:initial
setup_wave_loop	initial.f90	/^  subroutine setup_wave_loop$/;"	s	module:initial
t	cdata.f90	/^  real :: t=/;"	v	module:cdata
tangentf	general.f90	/^  real function tangentf(/;"	f	module:general
three_twos	cdata.f90	/^  real, parameter :: three_twos=/;"	v	module:cdata
timestep	timestep.f90	/^module timestep$/;"	m
timestep_check	initial.f90	/^  subroutine timestep_check$/;"	s	module:initial
timestep_quasip	quasip.f90	/^  subroutine timestep_quasip$/;"	s	module:quasip
total_length	cdata.f90	/^  real :: total_length /;"	v	module:cdata
tree	tree.f90	/^module tree$/;"	m
tree_walk	tree.f90	/^   recursive subroutine tree_walk(/;"	s	module:tree
tree_walk_flip	tree.f90	/^   recursive subroutine tree_walk_flip(/;"	s	module:tree
tree_walk_general	tree.f90	/^   recursive subroutine tree_walk_general(/;"	s	module:tree
twenty_three_twelve	cdata.f90	/^  real, parameter :: twenty_three_twelve=/;"	v	module:cdata
u	cdata.f90	/^    real :: u(/;"	k	type:quasi
u	cdata.f90	/^    real :: u(/;"	k	type:qvort
u1	cdata.f90	/^    real :: u(3), u1(/;"	k	type:quasi
u1	cdata.f90	/^    real :: u(3), u1(/;"	k	type:qvort
u2	cdata.f90	/^    real :: u(3), u1(3), u2(/;"	k	type:quasi
u2	cdata.f90	/^    real :: u(3), u1(3), u2(/;"	k	type:qvort
u_norm	cdata.f90	/^    real :: u_norm(/;"	k	type:grid
u_sup	cdata.f90	/^    real :: u_sup(/;"	k	type:grid
unit_k	ksmodel.f90	/^    real,private,dimension(3,KSmodes) :: unit_k,/;"	v	module:KSmodel
vel_xflow	normal_fluid.f90	/^    real, parameter, private :: vel_xflow=/;"	v	module:normal_fluid
velocity_info	diagnostic.f90	/^  subroutine velocity_info(/;"	s	module:diagnostic
velocity_quasip	quasip.f90	/^  subroutine velocity_quasip(/;"	s	module:quasip
vtree	tree.f90	/^   type (node), pointer :: vtree /;"	v	module:tree
warning_message	cdata.f90	/^  subroutine warning_message(/;"	s	module:cdata
wavenumbers	ksmodel.f90	/^    subroutine wavenumbers(/;"	s	module:KSmodel
width	tree.f90	/^      real :: width /;"	k	type:node
x	cdata.f90	/^    real :: x(/;"	k	type:grid
x	cdata.f90	/^    real :: x(/;"	k	type:quasi
x	cdata.f90	/^    real :: x(/;"	k	type:qvort
zero_finder	general.f90	/^  subroutine zero_finder(/;"	s	module:general
